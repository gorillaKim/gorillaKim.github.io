{"componentChunkName":"component---src-templates-blog-template-js","path":"/react-dependencies-array/","result":{"data":{"cur":{"id":"370d49c9-91b8-5de6-b1c2-b049bec64112","html":"<h2 id=\"-서론\" style=\"position:relative;\"><a href=\"#-%EC%84%9C%EB%A1%A0\" aria-label=\" 서론 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>😃 서론</h2>\n<p>React를 사용하다 보면 특정 컴포넌트가 화면에 그려질때 API를 호출하여 데이터를 가져오는등 특수한 로직을 수행해야할때가 있습니다. 이럴때 우리는 일반적으로 useEffect를 많이 활용하게 됩니다.</p>\n<p>이렇듯 useEffect는 특정한 컴포넌트가 랜더될때(그려질 때) 특수한 로직을 처리하기 위해 사용되는 React의 공식 hook중 하나입니다. useEffect는 첫 랜더시에만 특정 로직이 동작하게 할 수도 있지만 dependencies array 를 통해 특정 값들이 변화되었을때만 특정 로직이 동작하도록 할수도 있습니다.</p>\n<br/>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>reportId<span class=\"token punctuation\">,</span> setReportId<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">useEffect</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token builtin\">number</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// reportId가 달라질때마다 호출 됨</span>\n  axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">/reports/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>reportId<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span>axios<span class=\"token punctuation\">,</span> reportId<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<br/>\n<p>이처럼 의도치 않은 상황에 변화를 만드는 함수를 Side effect function 이라고 하는데요, 공식적으로 제공되는 hook들 중에는 useEffect 말고도 useMemo, useCallback 등이 있습니다.</p>\n<p>여기서 제가 집중에서 이야기를 해보고 싶은 내용은 <strong>dependencies array 를 통한 useEffect 내부 로직수행 과정</strong>입니다.</p>\n<p><strong>dependencies array</strong> 가 변화 했을때만 동작한다는 조건은 해당 함수들 내부에서 <strong>dependencies array</strong> 에 담어준 값들을 기억해두고 매 랜더시마다 해당 랜더 시점의 값과 비교한다는것을 의미합니다.</p>\n<p>위의 코드 예시에서는 우리가 <strong>dependencies array</strong> 에 Type 이 숫자형인 reportId를 담아준것을 예로들 수 있습니다.</p>\n<p>이때 우리가 중요하게 봐야하는 점은 <strong>dependencies array</strong> 에 담아주는 변수들의 타입입니다. 앞선 예제의 reportId처럼  문자형, 숫자형 과 같은 값들에 대해서는 React 가 전 후를 비교하여 변경된 시점에만 내부 로직을 수행해줍니다.</p>\n<p>하지만, <strong>Object, Array</strong> 와 같은 데이터 형들은 React가 비교를 못하고 같은 값임에도 변경 되었다고 인식합니다.</p>\n<br/>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>reportId<span class=\"token punctuation\">,</span> setReportId<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">useEffect</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token builtin\">number</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>apiProps<span class=\"token punctuation\">,</span> setApiProps<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">useEffect</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token punctuation\">{</span>name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>name<span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// reportId가 달라질때마다 호출 됨</span>\n  <span class=\"token comment\">// apiProps 변경 유무 상관없이 매 랜더시마다 호출 됨</span>\n  axios<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">/reports/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>reportId<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> apiProps<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span>axios<span class=\"token punctuation\">,</span> reportId<span class=\"token punctuation\">,</span> apiProps<span class=\"token punctuation\">]</span></code></pre></div>\n<blockquote>\n<p>위의 코드에서는 apiProps 의 변경유무를 react가 알 수 없기 때문에 매 랜더시마다 axios.put(<code class=\"language-text\">/reports/${reportId}</code>, apiProps) 함수를 호출하게 됩니다.</p>\n</blockquote>\n<br/>\n<p><strong>어째서 Object 형태의 데이터는 비교를 잘 못하는것 일까요?</strong></p>\n<p>원인은 생각보다 간단합니다. React 에서는 <strong>Shallow compare</strong> 만 지원하기 때문인데요, 다시말해 <strong>deep compare 을 필요로 하는 Object, Array 등</strong>은 지원하지 않는다는말을 의미합니다. 이러한 이유 때문에 <strong>dependencies array</strong> 에 Object나 Array를 담아주면 매 랜더시마다 전 후결과가 다르다고 판단하여 내부 로직을 수행하게 되는것이죠.</p>\n<br/>\n<br/>\n<h2 id=\"-본론\" style=\"position:relative;\"><a href=\"#-%EB%B3%B8%EB%A1%A0\" aria-label=\" 본론 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🤔 본론</h2>\n<p>사실 React를 개발하다보면 변수를 Object 형태로 관리하는 상황들이 많이 발생합니다. 예를들어 api 호출을 통해 받아온 Metric 형태 데이터나, 유저정보 등이 있을수 있고 또 api 호출을 위해 담아줘야 하는 props 등이 있습니다.</p>\n<p>그렇다면 이러한 상황들에서 useEffect를 써야 한다면 어떻게 해야할까요?</p>\n<p>가장 단순하면서 나이스한 방법은  <em><strong>dependencies array</strong> 에 Shallow compare 가 가능한 Type의 값들만 담아주는것입니다.</em></p>\n<p>대표적인 예시로 <strong>Object 형태의 상태값을 더 잘게 쪼개어 숫자와 문자형태로 분리</strong>하거나, <strong>문자열 배열등을 비구조 할당</strong>하여 <strong>dependencies array</strong> 에 담아주는 방법등 여러방법이 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>reportId<span class=\"token punctuation\">,</span> setReportId<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">useEffect</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token builtin\">number</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>apiProps<span class=\"token punctuation\">,</span> setApiProps<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">useEffect</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token punctuation\">{</span>name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>name<span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// reportId가 달라질때마다 호출 됨</span>\n  <span class=\"token comment\">// apiProps 내부 값들이 각각 달라질때마다 호출 됨</span>\n  axios<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">/reports/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>reportId<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> apiProps<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span>axios<span class=\"token punctuation\">,</span> reportId<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span>apiProps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>그렇다고 해서 위와같은 방법은 썩 맘에드는 방법은 아닐겁니다.  api props 경우에는 내부 property 가 많지 않지만 api를 통해 받아온 Metric data는 몇백개의 Row data 가될수도 있고, 각 Row data 의 형태가  Object가 아니라고 보장할 수 없을테니까요.</p>\n<p>제일 좋은 방법은 useEffect를 사용하지 않는 방식으로 로직을 개선하는 것이겠지만, 늘 그렇듯 다양한 외부환경적 요소에 의해 useEffect를 써야만 하는 불가피한 상황들이 생겨날겁니다. 이럴때는 아래의 방법이 도움이 죌 수 있습니다.</p>\n<br/>\n<h3 id=\"1-jsonstringify\" style=\"position:relative;\"><a href=\"#1-jsonstringify\" aria-label=\"1 jsonstringify permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>(1) JSON.stringify()</h3>\n<p><strong>JSON.stringify()</strong> 메서드는 Object 형 데이터를 문자열로 바꿔주는 기능을 수행합니다. 이를 통해 변환된 문자열을 dependencies array 에 담아주게되면 리액트가 그 변화를 감지할 수 있게 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>reportId<span class=\"token punctuation\">,</span> setReportId<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">useEffect</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token builtin\">number</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>apiProps<span class=\"token punctuation\">,</span> setApiProps<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">useEffect</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token punctuation\">{</span>name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>name<span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// reportId가 달라질때마다 호출 됨</span>\n  <span class=\"token comment\">// apiProps 내부 값들이 각각 달라질때마다 호출 됨</span>\n  axios<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">/reports/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>reportId<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> apiProps<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span>axios<span class=\"token punctuation\">,</span> reportId<span class=\"token punctuation\">,</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>apiProps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>하지만, 너무 많은 데이터를 문자열화 할 경우에는 성능에 문제가 될 수 있음으로 주의하셔야 합니다.</p>\n<br/>\n<h3 id=\"2-usedeepcomparememoize\" style=\"position:relative;\"><a href=\"#2-usedeepcomparememoize\" aria-label=\"2 usedeepcomparememoize permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>(2) useDeepCompareMemoize</h3>\n<p><strong>useDeepCompareEffect</strong> 는 이전값을 useRef로 메모이제이션 하여 저장해두고 매 랜더시마다 해당시점의 값과 저장해 둔 값을 깊은 비교를하여 달라졌을때만 값이 업데이트 되도록 하는 훅입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> isEqual <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'lodash'</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">useDeepCompareMemoize</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>Type<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>value<span class=\"token operator\">:</span> Type<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Type <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> ref <span class=\"token operator\">=</span> <span class=\"token function\">useRef</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> signalRef <span class=\"token operator\">=</span> <span class=\"token function\">useRef</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">isEqual</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> ref<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    ref<span class=\"token punctuation\">.</span>current <span class=\"token operator\">=</span> value\n    signalRef<span class=\"token punctuation\">.</span>current <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// eslint-disable-next-line react-hooks/exhaustive-deps</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">useMemo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> ref<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>signalRef<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>해당 훅은 메모이제이션 이라는 최적화 훅을 사용합니다. 해당 훅은 데이터를 메모리에 얹어두고 기억해서 사용하는 방법인데요, 메모리에 얹어두고 사용하기 때문에 과도한 사용시 메모리리 공간을 많이 차지하여 성능에 문제가 될 수 있습니다.</p>\n<p>위 코드에서 useMemo 를 보면 dependecies array 가 있는것을 확인이 가능한데요, 이는 useMemo 또한 내부상태를 비교하여 최적화 하고 있음을 알 수 있습니다.</p>\n<p>이러한 비교 작업 또한 성능에 영향을 주는데요, 때로는 랜더링 최적화를 위한 비용이 재랜더로 발생한 비용보다 커질 수 있으니 해당 훅을 사용시 주의하셔야 합니다.</p>\n<br/>\n<br/>\n<h2 id=\"-결론\" style=\"position:relative;\"><a href=\"#-%EA%B2%B0%EB%A1%A0\" aria-label=\" 결론 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>💡 결론</h2>\n<p>React 에서는 랜더링 최적화를 위해 useMemo, useCallback 등을 지원합니다. 하지만 이 훅들도 useEffect와 마찬가지로 deep equal(deep compare) 를 지원하지 않습니다. 때문에 이러한 상황에선 <strong>useDeepCompareEffect</strong> 사용이 대안이 될수도 있습니다.</p>\n<p>하지만, useMemo 도 useCallback도 랜더링 최적화 과정에서 근본적인 해결이 아닌것처럼 useDeepCompareEffect 를 사용하는것도 근본적인 해결책은 아닙니다. 때문에 로직을 개선하여 useDeepCompareEffect를 사용해야하는 상황을 만들지 않는것이 최선책이라 볼수 있습니다.</p>\n<p>이러한 훅들은 임시방편 돌파구를 제공하기 때문에 편리해서 자꾸 손이 가게 됩니다. 하지만, useDeepCompareEffect만 보면 동일한 데이터를 메모리에 저장해야하기 때문에 메모리 낭비가 생길 수 있고, 내부에서 매 랜더시마다 비교 로직이 수행되기 때문에 무분별한 사용시 사이트의 성능을 저해시킬 수 있다는 치명적인 단점이 있습니다. 때문에 상황을 잘 판단하여서 사용하는것을 권장드리며 글을 마칩니다 : )</p>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#-%EC%84%9C%EB%A1%A0\">😃 서론</a></p>\n</li>\n<li>\n<p><a href=\"#-%EB%B3%B8%EB%A1%A0\">🤔 본론</a></p>\n<ul>\n<li><a href=\"#1-jsonstringify\">(1) JSON.stringify()</a></li>\n<li><a href=\"#2-usedeepcomparememoize\">(2) useDeepCompareMemoize</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#-%EA%B2%B0%EB%A1%A0\">💡 결론</a></p>\n</li>\n</ul>\n</div>\n<!--stackedit_data:\neyJoaXN0b3J5IjpbLTU4MTYxNDQ5NCwxMjE4MTM1MzgyLDg1Nz\nAxMjU0NiwtMTgwMjQ1NzM4N119\n-->","excerpt":"😃 서론 React를 사용하다 보면 특정 컴포넌트가 화면에 그려질때 API를 호출하여 데이터를 가져오는등 특수한 로직을 수행해야할때가 있습니다. 이럴때 우리는 일반적으로 useEffect를 많이 활용하게 됩니다. 이렇듯 useEffect는 특정한 컴포넌트가 랜더될때(그려질 때) 특수한 로직을 처리하기 위해 사용되는 React의 공식 hook중 하나입니다. useEffect는 첫 랜더시에만 특정 로직이 동작하게 할 수도 있지만 dependencies array 를 통해 특정 값들이 변화되었을때만 특정 로직이 동작하도록 할수도 있습니다. 이처럼 의도치 않은 상황에 변화를 만드는 함수를 Side effect function 이라고 하는데요, 공식적으로 제공되는 hook들 중에는 useEffect 말고도 useMemo, useCallback 등이 있습니다. 여기서 제가 집중에서 이야기를 해보고 싶은 내용은 dependencies array 를 통한 useEffect 내부 로직수행 과정입니…","frontmatter":{"date":"February 23, 2023","title":"React.useEffect 와 dependencies Array","categories":"블로그 React","author":"gorillaKim","emoji":"✍️"},"fields":{"slug":"/react-dependencies-array/"}},"next":null,"prev":{"id":"df0fabaa-8319-53b0-955f-57e5bc340fb8","html":"<blockquote>\n<p>⚠️ 주의 ⚠️<br>\n블로그 주인의 나태함으로 인해 이번글은 다소 근황내용이 많습니다.</p>\n</blockquote>\n<h2 id=\"그간-개발-근황\" style=\"position:relative;\"><a href=\"#%EA%B7%B8%EA%B0%84-%EA%B0%9C%EB%B0%9C-%EA%B7%BC%ED%99%A9\" aria-label=\"그간 개발 근황 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>그간 개발 근황</h2>\n<h3 id=\"팀이동--승진\" style=\"position:relative;\"><a href=\"#%ED%8C%80%EC%9D%B4%EB%8F%99--%EC%8A%B9%EC%A7%84\" aria-label=\"팀이동  승진 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>팀이동 &#x26; 승진</h3>\n<p>입사하고 함께 개발하던 팀원들을 떠나 같은 회사내 다른 개발팀으로 이동하게 되었습니다. 지금팀의 프론트 리더님께서 저를 너무 좋게 평가해주셨고, 좋은 기회로 지금의 팀에서 새롭고 또다른 개발경험을 할 수 있게되었습니다.<br>\n네, 별일은 아니지만 승진을 했습니다 😊. 사실, 개발에 대한 애정 혹은 업무에 대한 열정은 승진 전후로 달라진것이 없습니다. 여전히 뜨거운것 같아요. 하지만 승진에 따른 저를 향한 기대감, 신입개발자들과 함께할 개발경험 때문인지 전보다 큰 책임감을 느끼고 있습니다. 이제는 코드 뿐 아니라 업무태도, 동료와 잘 소통하는 방법에도 신경을 더 쓰게되는것 같아요. 🧐</p>\n<h3 id=\"스크럼마스터\" style=\"position:relative;\"><a href=\"#%EC%8A%A4%ED%81%AC%EB%9F%BC%EB%A7%88%EC%8A%A4%ED%84%B0\" aria-label=\"스크럼마스터 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>스크럼마스터</h3>\n<p>지금 회사는 에자일 개발 방법론을 사용하고 있는데요, 올해 팀내에서 3분기 스크럼마스터 포지션을 맡게 되었습니다. 평소에도 에자일에 관심이 있었는데, 이완 한번 맡은 포지션 열심히 해보자는 생각에 책도 찾아 읽어보고, 아티클도 읽어보면서 공부하는 시간을 가졌습니다. 덕분에 팀내 개발문화나 일정을 관리에 이전보다 폭 넓은 시야를 갖게 된것 같습니다.</p>\n<h3 id=\"사내-서비스-배포\" style=\"position:relative;\"><a href=\"#%EC%82%AC%EB%82%B4-%EC%84%9C%EB%B9%84%EC%8A%A4-%EB%B0%B0%ED%8F%AC\" aria-label=\"사내 서비스 배포 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>사내 서비스 배포</h3>\n<p>자세하게 이야기는 못드리지만, 사내 고객들을 위해 사용될 서비스 배포를 위해 밤낮, 평일 주말 할것없이 정신없이 일에 몰두했던것 같습니다. 뭔가 고객에게 서비스 될거라는 생각에 욕심이 생겨 개인시간도 더 투자해서 일했던것 같아요.\n다행이도, 지금까지 별다른 오류없이 잘 사용하고 계신것 같아 내심 뿌듯해하고 있습니다.</p>\n<h3 id=\"기타-잡다한-개발시도\" style=\"position:relative;\"><a href=\"#%EA%B8%B0%ED%83%80-%EC%9E%A1%EB%8B%A4%ED%95%9C-%EA%B0%9C%EB%B0%9C%EC%8B%9C%EB%8F%84\" aria-label=\"기타 잡다한 개발시도 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>기타 잡다한 개발시도</h3>\n<p>블로그에 작성한것도 있지만, 그간 여러가지 새로운 개발시도를 했습니다.\nopenapi-generator, msw, 모노레포, figma to icons 라이브러리 제작, 디자인시스템 구축까지 여러가지를 경험했고 대부분은 만족하며 아직도 잘 사용하고 있습니다. 일부는 사내 블로그에만 기제를 해둬서 기회가 될때 개인 블로그에도 공유를 해볼게요~</p>\n<h3 id=\"스터디\" style=\"position:relative;\"><a href=\"#%EC%8A%A4%ED%84%B0%EB%94%94\" aria-label=\"스터디 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>스터디</h3>\n<p>앱개발에도 관심이 있던터라 2021 년부터 serviceworker 를 이용한 프로그레시브 웹앱도 공부를 계속하고 있었어요. (덕분에 msw를 일찍 접하고 잘 사용하고 있구요)</p>\n<p>이번에는 구글에서 만든 dart 라는 언어와 flutter 프레임워크를 이용해 앱개발에도 도전하고 있습니다.</p>\n<p>어느정도 손에익어 괜찮은 프로덕트가 나오게 되면, 해당 내용도 블로그로 작성해 볼 예정이에요.</p>\n<h2 id=\"사생활-ㅎㅎ\" style=\"position:relative;\"><a href=\"#%EC%82%AC%EC%83%9D%ED%99%9C-%E3%85%8E%E3%85%8E\" aria-label=\"사생활 ㅎㅎ permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>\b사생활 ㅎㅎ</h2>\n<p>저에겐 남들 몰래 틈틈이 제 개인 버킷리스트를 채우는 취미가 있습니다. 제 버킷리스트에는 거창한게 있지는 않고, 주로 제가 경험해보지 못했던 것들에 대한 내용들로 채워져 있습니다.</p>\n<p>제작년에는 스노우보드와 서핑보드를 처음 배웠고,  혼자 야간등산을 다녀왔습니다. 올해는 제 버킷리스트속 “바다에서 상어만나기” 를 실천했습니다. 바다속에서 상어와 직접 미팅을 잡으려면 거쳐야 하는 절차가 적지는 않았습니다 ㅎㅎ…</p>\n<h3 id=\"1-스쿠버다이빙-자격증-취득\" style=\"position:relative;\"><a href=\"#1-%EC%8A%A4%EC%BF%A0%EB%B2%84%EB%8B%A4%EC%9D%B4%EB%B9%99-%EC%9E%90%EA%B2%A9%EC%A6%9D-%EC%B7%A8%EB%93%9D\" aria-label=\"1 스쿠버다이빙 자격증 취득 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 스쿠버다이빙 자격증 취득</h3>\n<p>상어 요녀석들은 보통 물살이 강하고 깊은 수심에서 논다고 합니다. 그래서 산소통 없이는 만날수가 없어 스쿠버 다이빙 자격증이 필요했습니다.</p>\n<p>그래서 오픈워터라는 자격증을 취득했는데, 상어가 있는 깊이까지 가려면 어드벤스드 자격증이 필요하다하여… 6개월이라는 시간에 걸쳐 어드벤스드를 취득했습니다.</p>\n<blockquote>\n<p>스쿠버 다이빙 자격증 딴다고 제주도를 제일 많이갔던 한해였던것 같아요 😹</p>\n</blockquote>\n<h3 id=\"2-말레이시아-시파단\" style=\"position:relative;\"><a href=\"#2-%EB%A7%90%EB%A0%88%EC%9D%B4%EC%8B%9C%EC%95%84-%EC%8B%9C%ED%8C%8C%EB%8B%A8\" aria-label=\"2 말레이시아 시파단 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 말레이시아 시파단!</h3>\n<p>자격증을 따고 상어보자고 말레이시아까지 와버렸고, 시파단에서 그동안 원했던 상어님과 N:1 미팅에 성공하였습니다. ( 물론 제가 1이에요 )</p>\n<h3 id=\"느낀점\" style=\"position:relative;\"><a href=\"#%EB%8A%90%EB%82%80%EC%A0%90\" aria-label=\"느낀점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>느낀점</h3>\n<p>우선 비싼 취미구나를 느꼈습니다 ㅋㅋㅋㅋ 생각보다 돈이 많이 들어가는 스포츠더라구요…\n근데 바다에 한번 들어가보면 내가 투자한 돈 이상의 값어치를 한다는걸 느낄수 있습니다.\n소리가 차단된 고요한 바닷속, 마치 하늘을 나는듯한 거북이와 물고기떼를 보면 새로운 세계에 초대받아 놀러온 느낌이 듭니다. 마치 내가 피터펜이 된것처럼 물속을 날아다니며 해양생물을 관찰하는 재미가 솔솔합니다.\n자주 가지는 못하겠지만, 연례 행사로 한번씩은 다닐것 같네요 ㅎㅎ.</p>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#%EA%B7%B8%EA%B0%84-%EA%B0%9C%EB%B0%9C-%EA%B7%BC%ED%99%A9\">그간 개발 근황</a></p>\n<ul>\n<li><a href=\"#%ED%8C%80%EC%9D%B4%EB%8F%99--%EC%8A%B9%EC%A7%84\">팀이동 &#x26; 승진</a></li>\n<li><a href=\"#%EC%8A%A4%ED%81%AC%EB%9F%BC%EB%A7%88%EC%8A%A4%ED%84%B0\">스크럼마스터</a></li>\n<li><a href=\"#%EC%82%AC%EB%82%B4-%EC%84%9C%EB%B9%84%EC%8A%A4-%EB%B0%B0%ED%8F%AC\">사내 서비스 배포</a></li>\n<li><a href=\"#%EA%B8%B0%ED%83%80-%EC%9E%A1%EB%8B%A4%ED%95%9C-%EA%B0%9C%EB%B0%9C%EC%8B%9C%EB%8F%84\">기타 잡다한 개발시도</a></li>\n<li><a href=\"#%EC%8A%A4%ED%84%B0%EB%94%94\">스터디</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EC%82%AC%EC%83%9D%ED%99%9C-%E3%85%8E%E3%85%8E\">\b사생활 ㅎㅎ</a></p>\n<ul>\n<li><a href=\"#1-%EC%8A%A4%EC%BF%A0%EB%B2%84%EB%8B%A4%EC%9D%B4%EB%B9%99-%EC%9E%90%EA%B2%A9%EC%A6%9D-%EC%B7%A8%EB%93%9D\">1. 스쿠버다이빙 자격증 취득</a></li>\n<li><a href=\"#2-%EB%A7%90%EB%A0%88%EC%9D%B4%EC%8B%9C%EC%95%84-%EC%8B%9C%ED%8C%8C%EB%8B%A8\">2. 말레이시아 시파단!</a></li>\n<li><a href=\"#%EB%8A%90%EB%82%80%EC%A0%90\">느낀점</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<!--stackedit_data:\neyJoaXN0b3J5IjpbODQ2MDQ1OTk3LC0xMDQ0MDIyNDAxLDE0OD\nc2MzQzNDcsMTU5Njc4OTE4M119\n-->","frontmatter":{"date":"March 22, 2023","title":"주간 일상공유 - 2024 03 넷째주","categories":"일상","author":"gorillaKim","emoji":"✍️"},"fields":{"slug":"/weekly4-2024-03/"}},"site":{"siteMetadata":{"siteUrl":"https://gorillakim.github.io","comments":{"utterances":{"repo":"gorillaKim/gorillaKim.github.io"}}}}},"pageContext":{"slug":"/react-dependencies-array/","nextSlug":"","prevSlug":"/weekly4-2024-03/"}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}